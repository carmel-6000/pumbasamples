1. Make sure /server/datasources.json holds the right database/password for your specific project

2. As Default, there are two users in the sytem, which have these access details:
   * admin: admin@carmel6000.amitnet.org, E2PSzAmJ-5-ldKnl, role: SUPERADMIN
   * Batz:  batz@carmel6000.amitnet.org, 7w3lA^WPVMY0, role: SIMPLEUSER


3. Run both server and react client: (terminal 1): node . (terminal 2): npm start

4. Navigate your browser to localhost:3000, It should prompt you with a welcome screen

5. Try to access "Dashboard", Login as admin user, this step should work properly.

6. Once login is successfull, remove remote repository of this boilerplate: 
   $git remote rm origin
   Make sure there is no remote origin linked: git remote -v

7. Hook in your project's repository as following:
       
       - Create a new repository in github/carmel-6000 (keys find with Eran, Miri, Sam ...)
       - git init
       - git add .
       - git remote add origin https://github.com/carmel-6000/PROJECT_NAME.git
       - git commit -am "first commit for this project"  


* Debugging:

  Debug MySQL queries:                                 DEBUG=loopback:datasource node .
  Debug Auth Module (login, authentication, etc):      DEBUG=model:user node .
  Debug Files Handler Module                           DEBUG=model:file node .
  Debugging Models/middlewares initialization          DEBUG=loopback:boot:executor
  
  More info here: https://loopback.io/doc/en/lb3/Setting-debug-strings.html
         
       
* Handling Users 

User table in database should be empty
All users data should be included only into CustomUser only
You may change CustomUser model as you wish
However, you cannot modify /src/modules/auth/server/models/CustomUser.js or CustomUser.json 

* Assigning roles to users

The system comes with three different roles as an example:
* ADMIN: Every user that has SOME access to dashboard and administration options
* SUPERADMIN: A single user that can do everything 
* SIMPLEUSER

Each role should have a secret code so that it won't be exposed on the client side.
Never check roles on the client side like this: "if userRole=='ADMIN' {} " or anything similar to this.

When creating a new role you should generate a secret string (just type Jibrish to roleKey !)
example:
insert into Role(name,roleKey) values('SUPERADMIN','spf%#kfpoFFAa2234adAA244asZZv');

* How Assign a role SUPERADMIN (role id 3) to user admin@carmel6000.amitnet.org (user id 1):
insert into RoleMapping(principalType,principalId,roleId) values('ROLE',1,3);

* Each role has View Component that it can access
  The map of permissions between components and roles is defined on /src/consts/roles-access.config.json, this file will not be exposed on production.
  You can change this file as you wish in order to gain new permissions for roles.
  If a user doesn't have a permission to a component according to its role, its Route won't be rendered at all, instead, nothing will be rendered!

* You can always access User's role and User's components on the client side through the cookies
  COOKIE "kl": that is the role's key. COOKIE "klo": that is the array of allowed components converted to base64.

* This is how we "render on the fly" view components on the app:
const DashboardMain = loadable(() => import('./modules/dashboard/dashboard-main'));
This will be rendered only when the user launches this component.


* Quering data on the server side

  * Including related models:
  try{
    let res= await User.find({include: ['Games', 'SomeModel'],where:{}});
  }catch(err){}

* Quering data on the client side:

  * Order by and Limit 
  let filter="filter[order]=id DESC&filter[limit]=1";
  let [res,err]= await Auth.superAuthFetch('/api/Images?'+filter);



* Creating a new user from the command line:
An example how to create a user with role : "SIMPLEUSER"
$curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{"email":"batz@carmel6000.amitnet.org","password":"7w3lA^WPVMY0","username":"batz"}' 'http://localhost:8080/api/CustomUsers'

Now check what id is the new user
mysql>select * from CustomUser order by id desc limit 1;

Now put the NEW_USER_ID here: 
insert into RoleMapping(principalType,principalId,roleId) values('ROLE',NEW_USER_ID,1);  /*1 Stands for Role number 1 which is SIMPLEUSER*/


